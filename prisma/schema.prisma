// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
  votes        Vote[]
  upvotes      UpVote[]
  downvotes    DownVote[]
 
  @@map("users")
}

model Post {
  id        String   @id @default(cuid())
  title     String
  firstChoice Int @map("first_choice")
  secondChoice Int @map("second_choice")
  firstChoiceColor String @map("first_choice_color")
  secondChoiceColor String @map("second_choice_color")
  description String @map("description")
  published Boolean
  comments   Comment[]
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @map("author_id")
  votes     Vote[]
  upVotes   UpVote[]
  downVotes DownVote[]
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
 
  @@map("posts")
}

model Vote {
  id        String   @id @default(cuid())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @map("author_id")
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @map("post_id")
  choice   Int @map("choice")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@map("votes")
}


model Comment {
  id        String   @id @default(cuid())
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @map("author_id")
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @map("post_id")
  upvotes   UpVote[]
  downvotes DownVote[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@map("comments")
}

model UpVote {
  id        String   @id @default(cuid())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @map("author_id")
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String   @map("comment_id")
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @map("post_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@map("upvotes")

}

model DownVote {
  id        String   @id @default(cuid())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @map("author_id")
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String   @map("comment_id")
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @map("post_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@map("downvotes")


}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationtokens")
}